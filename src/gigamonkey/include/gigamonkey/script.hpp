// Copyright (c) 2009-2010 Satoshi Nakamoto
// Copyright (c) 2009-2016 The Bitcoin Core developers
// Copyright (c) 2018 The Bitcoin SV developers
// Copyright (c) 2019-2021 Daniel Krawisz
// Distributed under the Open BSV software license, see the accompanying file LICENSE.

#ifndef GIGAMONKEY_SCRIPT
#define GIGAMONKEY_SCRIPT

#include <gigamonkey/script/error.h>
#include <gigamonkey/script/flags.h>
#include <gigamonkey/script/config.hpp>
#include <gigamonkey/sighash.hpp>
#include <gigamonkey/satoshi.hpp>

namespace Gigamonkey::Bitcoin { 
    
    // the result returned from a script evaluatuon. 
    // There is a success or failure and a possible error. 
    struct result; 
    
    // Test validity of a script. All signature operations succeed. 
    result evaluate (const script &unlock, const script &lock, const script_config & = {});
    
    struct redemption_document;
    
    // Evaluate script with real signature operations. 
    result evaluate (
        const script &unlock,
        const script &lock,
        const redemption_document &doc,
        const script_config & = {});
    
    bool operator == (const result &, const result &);
    bool operator != (const result &, const result &);
    
    struct result {
        // any error that may have been generated by the script.
        ScriptError Error;

        // whether the top stack element was true and no error was generated.
        bool Success;
        
        result () : result {false} {}
        result (bool b) : Error {SCRIPT_ERR_OK}, Success {b} {}
        result (ScriptError err) : Error {err}, Success {false} {}
        
        bool valid () const {
            return !Error;
        }
        
        bool verify () const {
            return !Error && Success;
        }
        
        operator bool () const {
            return verify ();
        }
    };
    
    struct redemption_document {
        satoshi RedeemedValue;
        
        incomplete::transaction Transaction;
        
        index InputIndex;
        
        sighash::document add_script_code (bytes_view script_code) const {
            return sighash::document {RedeemedValue, script_code, Transaction, InputIndex};
        }
        
        // holdovers from Bitcoin Core. 
        bool check_locktime (const uint32_little &) const;
        bool check_sequence (const uint32_little &) const;
    };

    // delete the script up to and including the last instance of OP_CODESEPARATOR.
    // if no OP_CODESEPARATOR is found, nothing is removed.
    // this function is needed for correctly checking and generating signatures.
    bytes_view remove_until_last_code_separator (bytes_view);

    // the signature verification algorithm used by the script interpreter.
    result verify_signature (bytes_view sig, bytes_view pub, const sighash::document &doc, uint32 flags);
    
    bool inline operator == (const result &a, const result &b) {
        return a.Success == b.Success && a.Error == b.Error;
    }
    
    bool inline operator != (const result &a, const result &b) {
        return !(a == b);
    }
    
    std::ostream inline &operator << (std::ostream &o, const result &r) {
        if (r.Error) return o << r.Error;
        return o << (r.Success ? "success" : "failure");
    }
    
}

#endif 


