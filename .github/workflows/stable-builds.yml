name: Stable Gigamonkey Builds
on:
  push:
    branches:
      - production
env:
  BUILD_TYPE: Release
jobs:
  prep:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Get Conan
        uses: turtlebrowser/get-conan@v1.0
      - name: Cache Conan packages
        uses: actions/cache@v3
        id: cache-conan
        env:
          cache-name: cache-conan
        with:
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/conanfile.py') }}
          path: |
            ~/.conan/
      - if: ${{ steps.cache-conan.outputs.cache-hit != 'true' }}
        name: Create default profile
        run: conan profile new default --detect
      - if: ${{ steps.cache-conan.outputs.cache-hit != 'true' }}
        name: Update profile 11
        run: conan profile update settings.compiler.libcxx=libstdc++11 default
      - if: ${{ steps.cache-conan.outputs.cache-hit != 'true' }}
        name: Update profile version
        run: conan profile update settings.compiler.version=10 default
      - if: ${{ steps.cache-conan.outputs.cache-hit != 'true' }}
        name: Add conan remote
        run: |
          conan config set general.revisions_enabled=True
          conan remote add proofofwork https://conan.pow.co/artifactory/api/conan/conan
          conan user -p ${{ secrets.CONAN_USER_KEY }} -r proofofwork github
  test:
    runs-on: ubuntu-latest
    needs:
      - prep
    steps:
      - uses: actions/checkout@v2
      - name: Get Conan
        uses: turtlebrowser/get-conan@v1.0
      - name: Cache Conan packages
        uses: actions/cache@v3
        env:
          cache-name: cache-conan
        with:
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/conanfile.py') }}
          path: |
            ~/.conan/
      - name: run tests
        run: |
          mkdir test_build
          cd test_build
          conan install .. -r=proofofwork
          cmake .. -DPACKAGE_TESTS=ON
          cmake --build .
          cd bin
          for f in test*; do "./$f" ; done
  upload:
    runs-on: ubuntu-latest
    needs:
      - test
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - id: release
        uses: rymndhng/release-on-push-action@master
        with:
          bump_version_scheme: patch
          use_github_release_notes: true
      - name: Check Output Parameters
        run: |
          echo "Got tag name ${{ steps.release.outputs.tag_name }}"
          echo "Got release version ${{ steps.release.outputs.version }}"
      - uses: actions/checkout@v2
      - name: Get Conan
        uses: turtlebrowser/get-conan@v1.0
      - name: Cache Conan packages
        uses: actions/cache@v3
        env:
          cache-name: cache-conan
        with:
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/conanfile.py') }}
          path: |
            ~/.conan/
      - name: Run Conan
        run: |
          export CURRENT_VERSION="${{ steps.release.outputs.tag_name }}"
          conan install . -r proofofwork
          conan create . proofofwork/stable
          conan upload gigamonkey/${CURRENT_VERSION}@proofofwork/stable -r proofofwork --all
      - name: prepare release package
        run: |
          mkdir build
          cd build
          conan install .. -r=proofofwork
          cmake .. -DPACKAGE_TESTS=Off
          cmake --build .
          export CURRENT_VERSION="${{ steps.release.outputs.tag_name }}"
          cp -r ../include ./
          tar -czvf "gigamonkey-${CURRENT_VERSION}-linux.tar.gz" lib include
      - name: Upload release
        uses: svenstaro/upload-release-action@v2
        with:
          tag: ${{ steps.release.outputs.tag_name }}
          file: build/gigamonkey-${{ steps.release.outputs.tag_name }}-linux.tar.gz
          asset_name: gigamonkey-${{ steps.release.outputs.tag_name }}-linux.tar.gz